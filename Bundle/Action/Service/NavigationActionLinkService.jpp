/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:12:48
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-10-01 20:50:28
**************************************************************/

class NavigationActionLinkService extends MasterService {

	initialize : function () {
		var parent = _super();
		
		this.onListen();
		return parent;
	}

	public onListen : function (){
		var dispatcher = serviceLocator.get("Dispatcher");
		var	self = this;
		
		window['addEventListener']('popstate', function(event, state) {
		 	self.change(event , window['location']['pathname']['toString']());
		 }, false);


		dispatcher.listen("Navigation:Link:onClick", this, this.change.bind(this));
	}

	change : function (event, url) {
		var router = serviceLocator.get("Router");
		var serviceManager = serviceLocator.get("ServiceManager");
		var manageHistory = serviceManager.get("navigation_history_link_service");
		var dispatcher = serviceLocator.get("Dispatcher");
		var route = router.match(url);
		var title = serviceManager.get('navigation_title_change_service');

		if(url == undefined)
			throw "Url it's undefined, you can call this link/url";

		if (!route) {
			manageHistory.add({}, url);
			dispatcher.trigger('Error:url:404', { 'url' : url });
			return ;
		}

		this.action(route);
		if (event.state == undefined && event.state != 0) {
			manageHistory.add({}, url);
		}
		else {
			manageHistory.changeState(event.state.url);
		}
	}

	action : function (route) {
		var router = serviceLocator.get('Router');
		var controllerManager = serviceLocator.get('ControllerManager');
		var controller = controllerManager.get(route['actions']['controller']);
		var actions = route['actions'];

		delete route['actions'];

		controller[actions['method']](route);
		if (actions['noParent']) {
			var dispatcher = serviceLocator.get('Dispatcher');
			dispatcher.trigger('Router:setParentEntity:'+ actions['noParent'], { entity : false });
		}
	}
}